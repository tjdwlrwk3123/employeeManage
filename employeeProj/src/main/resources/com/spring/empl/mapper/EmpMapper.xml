<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.empl.mapper.EmpMapper">
	
	<select id="getIdSequence" resultType="int">
		select idnum.nextval from dual
	</select>
	<insert id="userInsert" parameterType="hashmap">
		insert into userinfo values(#{userid},#{userpassword},0)
	</insert>
	<insert id="empInsert" parameterType="hashmap">
		insert into emplist values((select nvl(max(empnum)+1,1) from emplist),#{userid},
		#{empname},#{ppnum},#{deptnum},#{empbirth},#{sollun},#{regionnum},#{phonenum},
		#{basepay},#{bonus},#{joinday})
	</insert>
	
	<select id="getEmployee" parameterType="hashmap" resultType="Employee">
		select * from(
			select a.*,rownum rnum from
			(
				select * from emplist
				<if test="keyword!=null and keyword!=''">
					<choose>
						<when test="search=='regionnum' or search=='ppnum' or search=='deptnum'">
							where ${search} = #{keyword}
						</when>
						<otherwise>
							where ${search} like '%'||#{keyword}||'%'
						</otherwise>
					</choose>
				</if>
			) a
		)
		<![CDATA[ where rnum>=#{startRow} and rnum<=#{endRow} ]]>
		<choose>
			<when test="sort!=null and sort!=''">
				<choose>
					<when test="sort=='basepay' or sort=='basepay+bonus'">
					order by ${sort} desc
					</when>
					<otherwise>
					order by ${sort} asc
					</otherwise>
				</choose>
			</when>
			<otherwise>
				order by empnum
			</otherwise>
		</choose>
	</select>
	
	<select id="getEmpOne" parameterType="int" resultType="Employee">
		select * from emplist where empnum=#{empnum}
	</select>
	<update id="updateEmp" parameterType="hashmap">
		update emplist set empname=#{empname},ppnum=#{ppnum},deptnum=#{deptnum},empbirth=#{empbirth},
		solarlunar=#{sollun},regionnum=#{regionnum},contactadress=#{phonenum},basepay=#{basepay},bonus=#{bonus},
		joindate=#{joinday} where empnum=#{empnum}
	</update>
	
	<!-- 직원삭제(아이디,권한삭제까지) -->
	<delete id="deleteEmp" parameterType="string">
		delete from emplist where userid=#{userid}
	</delete>
	<delete id="deleteAuth" parameterType="string">
		delete from authorities where userid=#{userid}
	</delete>
	<delete id="deleteUser" parameterType="string">
		delete from userinfo where userid=#{userid}
	</delete>
	<delete id="deletePhoto" parameterType="int">
		delete from imgtable where empnum=#{empNum}
	</delete>
	
	<!-- 지역관리 -->
	<insert id="regionInsert" parameterType="string">
		insert into region values((select nvl(max(regionnum)+1,1) from region),#{reginame})
	</insert>
	<select id="getRegion" resultType="Region">
		select * from region
		order by regionnum
	</select>
	<select id="getRegionOne" resultType="Region" parameterType="hashmap">
		select * from region
		where regionnum=#{reginum}
	</select>
	<delete id="regionDelete" parameterType="int">
		delete from region where regionnum=${regionnum}
	</delete>
	<update id="updateRegion" parameterType="hashmap">
		update region set regionname=#{regionname} where regionnum=#{regionnum}
	</update>
	
	<!-- 부서관리 -->
	<insert id="deptInsert" parameterType="string">
		insert into department values((select nvl(max(deptnum)+1,1) from department),#{deptname})
	</insert>
	<select id="getDepartment" resultType="Department">
		select * from department
		order by deptnum
	</select>
	<select id="getDepartmentOne" resultType="Department" parameterType="hashmap">
		select * from department
		where deptnum=#{deptnum}
	</select>
	<delete id="deptDelete" parameterType="int">
		delete from department where deptnum=${deptnum}
	</delete>
	<update id="updateDept" parameterType="hashmap">
		update department set deptname=#{deptName} where deptnum=#{deptNum}
	</update>
	
	<!-- 직위관리 -->
	<insert id="ppInsert" parameterType="string">
		insert into position values((select nvl(max(ppnum)+1,1) from position),#{ppname})
	</insert>
	<select id="getPosition" resultType="Position">
		select * from position
	</select>
	<select id="getPositionOne" resultType="Position" parameterType="hashmap">
		select * from position
		where ppnum=#{ppnum}
	</select>
	<delete id="ppDelete" parameterType="int">
		delete from position where ppnum=${ppnum}
	</delete>
	<update id="updatePosition" parameterType="hashmap">
		update position set ppname=#{ppName} where ppnum=#{ppNum}
	</update>
	
	<!-- 기본급관리 -->
	<select id="getBasepay" resultType="Payfor" parameterType="hashmap">
		select * from payfor where deptNum=#{dept} and ppNum=#{posi}
	</select>
	<select id="getAllBasepay" resultType="PDPJoin">
		select p.paynum,p.deptnum,p.ppnum,p.basepay,d.deptname,t.ppname
		from payfor p join department d
		on p.deptnum=d.deptnum
		join position t
		on p.ppnum=t.ppnum
		order by p.deptnum,p.ppnum
	</select>
	<update id="mergeBasepay" parameterType="hashmap">
		merge into payfor
		using dual
		on (deptnum=#{deptNum} and ppnum=#{ppNum})
		when matched then
			update set basepay=#{basepay}
		when not matched then
			insert values((select nvl(max(paynum)+1,1) from payfor),#{deptNum},#{ppNum},#{basepay})
	</update>
	
	<!-- 페이징처리 -->
	<select id="countEmp" resultType="int" parameterType="hashmap">
		select count(*) from emplist
		<if test="keyword!=null and keyword!=''">
			<choose>
				<when test="search=='regionnum' or search=='ppnum' or search=='deptnum'">
					where ${search} = #{keyword}
				</when>
				<otherwise>
					where ${search} like '%'||#{keyword}||'%'
				</otherwise>
			</choose>
		</if>
	</select>
	
	<!-- 이미지파일 -->
	<insert id="insertPhoto" parameterType="hashmap">
		merge into imgtable
		using dual
		on (empnum=#{empnum})
		when matched then
			update set img=#{img}
		when not matched then
			insert values(img_seq.nextval,#{empnum},#{img})
	</insert>
	<select id="getPhoto" parameterType="int" resultType="ImageVo">
		select * from imgtable where empnum=#{empnum}
	</select>
</mapper>